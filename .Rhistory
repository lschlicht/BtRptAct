#hist(as.numeric(feeds$bt_midpointFeed_min))
#hist(as.numeric(feeds$activeFeed))
#use only those where first and last feed exist (to make the data less messy)
feeds = subset(feeds, !is.na(bt_firstFeed) & !is.na(bt_lastFeed))
feeds[, group := paste(sex, rel_day_hatch, season)]
feeds[, use := .N, by = group]
table(feeds$use, feeds$sex)
feeds = subset(feeds, use >= N_season)
feeds[, br := "1_br"]
feeds[, tmp := scale3(bt_time_to_firstFeed_min), by = group]
feeds[, med_bt_time_to_firstFeed_min := median(tmp, na.rm = TRUE), by = list(ID, season, br)]
feeds[, tmp := scale3(bt_time_to_lastFeed_min), by = group]
feeds[, med_bt_time_to_lastFeed_min := median(tmp, na.rm = TRUE), by = list(ID, season, br)]
feeds[, tmp := scale3(bt_midpointFeed_min), by = group]
feeds[, med_bt_midpointFeed_min := median(tmp, na.rm = TRUE), by = list(ID, season, br)]
feeds[, tmp := scale3(activeFeed), by = group]
feeds[, med_activeFeed := median(tmp, na.rm = TRUE), by = list(ID, season, br)]
feeds[!is.na(activeFeed), Nbr_Feed := .N, by = list(ID, season, br)]
feeds[, Nbr_Feed := first(na.omit(Nbr_Feed)), by = list(ID, season, br)]
jpeg(filename = paste0("Figures/", Sys.time(), "_Feeding and hatchling age.jpeg"))
par(mfrow = c(2,1))
par(mar = c(3.1, 4.5, 0.1, 0.1))
par(las = 1)
boxplot(bt_firstFeed/60/60 ~ rel_day_hatch, data = feeds, outline = FALSE, ylab = "First feed")
boxplot(bt_lastFeed/60/60 ~ rel_day_hatch, data = feeds, outline = FALSE, ylab = "Last feed")
dev.off()
jpeg(filename = paste0("Figures/", Sys.time(), "_Feeding and hatchling number.jpeg"))
par(mfrow = c(2,2))
par(mar = c(3.1, 4.5, 0.1, 0.1))
par(las = 1)
boxplot(I(bt_firstFeed/60/60) ~ hatched, data = feeds, outline = FALSE, ylab = "First feed"); abline(v = 5.5)
boxplot(I(bt_lastFeed/60/60) ~ hatched, data = feeds, outline = FALSE, ylab = "Last feed"); abline(v = 5.5)
boxplot(I(bt_midpointFeed_min/60) ~ hatched, data = feeds, outline = FALSE, ylab = "Midpoint feeds"); abline(v = 5.5)
boxplot(I(activeFeed/60/60) ~ hatched, data = feeds, outline = FALSE, ylab = "Activity feeds"); abline(v = 5.5)
dev.off()
feeds[, sex := as.factor(sex)]
feeds[, age := as.factor(age)]
feeds[, firstEgg := as.IDate(firstEgg)]
feeds = unique(subset(feeds, select = c("season", "ID", "med_bt_time_to_firstFeed_min", "med_bt_time_to_lastFeed_min", "med_bt_midpointFeed_min", "med_activeFeed", "Nbr_Feed", "IDpartner", "sex", "age", "minAge", "firstEgg", "hatched")))
#make wide dataset
#winter columns come from ind_br
d1 = subset(ind_br, br == "0_nb")
d1[, Nbr := NULL]
#spring columns come from feeds
d2 = feeds
#female incubation comes from ind_br
d3 = subset(ind_br, sex == 2 & br == "1_br")
d3[, Nall := NULL]
d12 = merge(d1, d2, by = c("ID", "season", "IDpartner", "firstEgg", "age", "minAge", "sex"), all = TRUE)
wd = merge(d12, d3, by = c("ID", "season", "IDpartner", "firstEgg", "age", "minAge", "sex"), all = TRUE, suffixes = c("", ".inc"))
#remove very late nests here, based on ALL BROODS! (not just the ones we have data on)
con = dbcon()
fe = dbq(con, "SELECT year_ as season, date(firstEgg) as firstEgg FROM BTatWESTERHOLZ.BREEDING where firstEgg is not NULL and year_ is not NULL")
closeCon(con)
fe[, out_firstEgg := boxplot(yday(firstEgg), plot = FALSE)$stats[5], by = season]
fe[, firstEgg := NULL]
fe = unique(fe)
wd = merge(wd, fe, all.x = FALSE, all.y = FALSE, by = "season")
wd[yday(firstEgg) > out_firstEgg, ":=" ( #DO remove late broods
#wd[yday(firstEgg) > (out_firstEgg+500), ":=" ( #DO NOT remove late broods
med_bt_time_to_firstFeed_min = NA,
Nbr_firstFeed = NA,
med_bt_time_to_lastFeed_min = NA,
Nbr_lastFeed = NA,
med_bt_midpointFeed_min = NA,
Nbr_midpointFeed = NA,
med_activeFeed = NA,
Nbr_activeFeed = NA,
br.inc = NA,
arrival.inc = NA,
arrivalArea.inc = NA,
med_time_to_sunrise_min.inc = NA,
med_bt_time_to_sunrise_min.inc = NA,
med_time_to_sunset_min.inc = NA,
med_bt_time_to_sunset_min.inc = NA,
med_bt_midpoint.inc = NA,
med_active.inc = NA,
hatchDate.inc = NA,
Nbr.inc = NA,
Nall.inc = NA,
z_hatchDate.inc = NA,
firstEgg = NA
)]
#remove nests with less than 6 hatchlings, because the feeding behaviour may not be representative, see figure above.
#check how many lines are removed when reducing broods where only few young hatched
nrow(subset(wd, hatched < 6))/nrow(wd) #0.054
nrow(subset(wd, hatched < 6)) #134
nrow(wd) #2478
wd = subset(wd, hatched < 6)
wd[, hatched := NULL]
#scale first egg and arrival
#scale within season, but take into account that individual data points were measured multiple times!
tmp = unique(subset(wd, select = c('arrival', 'season', 'ID', 'sex')))[, z_arrival := scale(arrival), by = .(season, sex)]
wd = merge(wd, tmp, by = c('arrival', 'season', 'ID', 'sex'), all.x = TRUE)
tmp = unique(subset(wd, select = c('arrivalArea', 'season', 'ID', 'sex')))[, z_arrivalArea := scale(arrivalArea), by = .(season, sex)]
wd = merge(wd, tmp, by = c('arrivalArea', 'season', 'ID', 'sex'), all.x = TRUE)
tmp = unique(subset(wd, select = c('firstEgg', 'season', 'ID', 'sex')))[, z_firstEgg := scale(yday(firstEgg)), by = .(season)]
wd = merge(wd, tmp, by = c('firstEgg', 'season', 'ID', 'sex'), all.x = TRUE)
save(wd, file = paste0("Data/", Sys.Date(), "_N", N_bt, "_wide dataset.RData"))
return(wd)
}
wd[[i]] = create_feeding_visits(hooray, N_bt = i, N_season = i, sea = x2[[2]], ind_br = x2[[1]])
wd = list()
wd[[i]] = create_feeding_visits(hooray, N_bt = i, N_season = i, sea = x2[[2]], ind_br = x2[[1]])
nrow)wdüüi++
nrow(wd[[i]])
N_bt = 3
N_season = 3
sea = sea
create_feeding_visits = function(hooray, N_bt = 3, N_season = 3, sea = sea, ind_br = ind_br) {
con = dbcon()
stage = data.table(rbind(dbq(con, "SELECT year_ as season, box, IDfemale as ID, IDmale as IDpartner, 2 as sex, date(hatchDate) as hatchDate, date(firstEgg) as firstEgg, hatched FROM BTatWESTERHOLZ.BREEDING"),
dbq(con, "SELECT year_ as season, box, IDmale as ID, IDfemale as IDpartner, 1 as sex, date(hatchDate) as hatchDate, date(firstEgg) as firstEgg, hatched FROM BTatWESTERHOLZ.BREEDING")))
#add transponder
tr = data.table(rbind(dbq(con, "SELECT ID, transponder as transp FROM BTatWESTERHOLZ.ADULTS where transponder is not NULL"), dbq(con, "SELECT ID, transponder as transp FROM BTatWESTERHOLZ.CHICKS where transponder is not NULL")))
closeCon(con)
stage = merge(stage, tr)
#subset to include only the first attempt
stage[, firstAttempt := min(firstEgg) == firstEgg, by = .(season, ID)]
stage = stage[firstAttempt == TRUE, ]
stage[, firstAttempt := NULL]
#define from and to range for selecting the late nestling stage: 10 - 18 days after hatching
stage[, start := yday(hatchDate) + 11]
stage[, end := yday(hatchDate) + 17]
stage = unique(stage)
#attach to hooray for subsetting
feeds = copy(hooray)
feeds[, season := year(out_)]
feeds = merge(feeds, stage, by = c("transp", "season", "box"))
feeds = feeds[yday(out_) >= start & yday(out_) <= end,]
#remove visits that go overnight
feeds = subset(feeds, yday(in_) == yday(out_))
feeds[, date_ := as.IDate(in_)]
#use direction assignment
feeds[direction == "IN" | direction == "IN-OUT", firstFeed := min(in_, na.rm = TRUE), by = .(transp, date_)]
feeds[direction == "OUT" | direction == "IN-OUT", lastFeed := max(out_, na.rm = TRUE), by = .(transp, date_)]
feeds = unique(subset(feeds, select = c("season", "ID", "date_", "firstFeed", "lastFeed", "hatchDate", "sex", "IDpartner", "firstEgg", "hatched")))
#add age
con = dbcon()
feeds[, year_ := season]
feeds =   addIndVar(con, feeds)
#warnings are ok
closeCon(con)
feeds[, rel_day_hatch := yday(date_) - yday(hatchDate)]
feeds[, hatchDate := NULL]
#use only those where first and last feed exist (to make the data less messy)
feeds = subset(feeds, !is.na(firstFeed) & !is.na(lastFeed))
feeds[, firstFeed := as.ITime(firstFeed)]
feeds[, lastFeed := as.ITime(lastFeed)]
feeds[, midpointFeed_min := ((firstFeed + lastFeed)/2 - (12*60*60))/60]
feeds[, activeFeed := (lastFeed - firstFeed)/60/60]
#the outliers shouldn't matter given that I take the medians of several points
#hist(as.numeric(feeds$lastFeed)/60/60)
#hist(as.numeric(feeds$firstFeed)/60/60)
#hist(as.numeric(feeds$midpointFeed)/60)
#hist(as.numeric(feeds$activeFeed)/60/60)
#add second variable
feeds[, bt_firstFeed := as.numeric(median_n(firstFeed, N_bt)), by = date_]
feeds[, bt_lastFeed := as.numeric(median_n(lastFeed, N_bt)), by = date_]
feeds[, bt_time_to_firstFeed := as.numeric((firstFeed)-as.numeric(as.ITime(bt_firstFeed)))]
feeds[, bt_time_to_lastFeed := as.numeric((lastFeed)-as.numeric(as.ITime(bt_lastFeed)))]
feeds[, bt_time_to_firstFeed_min := as.numeric(bt_time_to_firstFeed)/60]
feeds[, bt_time_to_lastFeed_min := as.numeric(bt_time_to_lastFeed)/60]
feeds[, bt_midpointFeed_min := ((firstFeed + lastFeed)/2 - (12*60*60))/60]
hist(as.numeric(feeds$bt_time_to_lastFeed_min))
hist(as.numeric(feeds$bt_time_to_firstFeed_min))
hist(as.numeric(feeds$bt_midpointFeed_min))
hist(as.numeric(feeds$activeFeed))
#the outliers shouldn't matter given that I take the medians of several points, so I'm just removing the very strange values over +/- 2 hours
hist(as.numeric(feeds$bt_time_to_lastFeed_min))
hist(as.numeric(feeds$bt_time_to_firstFeed_min))
feeds = subset(feeds, abs(bt_time_to_firstFeed_min) < 120)
feeds = subset(feeds, abs(bt_time_to_lastFeed_min) < 120)
#hist(as.numeric(feeds$bt_time_to_lastFeed_min))
#hist(as.numeric(feeds$bt_time_to_firstFeed_min))
#hist(as.numeric(feeds$bt_midpointFeed_min))
#hist(as.numeric(feeds$activeFeed))
#use only those where first and last feed exist (to make the data less messy)
feeds = subset(feeds, !is.na(bt_firstFeed) & !is.na(bt_lastFeed))
feeds[, group := paste(sex, rel_day_hatch, season)]
feeds[, use := .N, by = group]
table(feeds$use, feeds$sex)
feeds = subset(feeds, use >= N_season)
feeds[, br := "1_br"]
feeds[, tmp := scale3(bt_time_to_firstFeed_min), by = group]
feeds[, med_bt_time_to_firstFeed_min := median(tmp, na.rm = TRUE), by = list(ID, season, br)]
feeds[, tmp := scale3(bt_time_to_lastFeed_min), by = group]
feeds[, med_bt_time_to_lastFeed_min := median(tmp, na.rm = TRUE), by = list(ID, season, br)]
feeds[, tmp := scale3(bt_midpointFeed_min), by = group]
feeds[, med_bt_midpointFeed_min := median(tmp, na.rm = TRUE), by = list(ID, season, br)]
feeds[, tmp := scale3(activeFeed), by = group]
feeds[, med_activeFeed := median(tmp, na.rm = TRUE), by = list(ID, season, br)]
feeds[!is.na(activeFeed), Nbr_Feed := .N, by = list(ID, season, br)]
feeds[, Nbr_Feed := first(na.omit(Nbr_Feed)), by = list(ID, season, br)]
jpeg(filename = paste0("Figures/", Sys.time(), "_Feeding and hatchling age.jpeg"))
par(mfrow = c(2,1))
par(mar = c(3.1, 4.5, 0.1, 0.1))
par(las = 1)
boxplot(bt_firstFeed/60/60 ~ rel_day_hatch, data = feeds, outline = FALSE, ylab = "First feed")
boxplot(bt_lastFeed/60/60 ~ rel_day_hatch, data = feeds, outline = FALSE, ylab = "Last feed")
dev.off()
jpeg(filename = paste0("Figures/", Sys.time(), "_Feeding and hatchling number.jpeg"))
par(mfrow = c(2,2))
par(mar = c(3.1, 4.5, 0.1, 0.1))
par(las = 1)
boxplot(I(bt_firstFeed/60/60) ~ hatched, data = feeds, outline = FALSE, ylab = "First feed"); abline(v = 5.5)
boxplot(I(bt_lastFeed/60/60) ~ hatched, data = feeds, outline = FALSE, ylab = "Last feed"); abline(v = 5.5)
boxplot(I(bt_midpointFeed_min/60) ~ hatched, data = feeds, outline = FALSE, ylab = "Midpoint feeds"); abline(v = 5.5)
boxplot(I(activeFeed/60/60) ~ hatched, data = feeds, outline = FALSE, ylab = "Activity feeds"); abline(v = 5.5)
dev.off()
feeds[, sex := as.factor(sex)]
feeds[, age := as.factor(age)]
feeds[, firstEgg := as.IDate(firstEgg)]
feeds = unique(subset(feeds, select = c("season", "ID", "med_bt_time_to_firstFeed_min", "med_bt_time_to_lastFeed_min", "med_bt_midpointFeed_min", "med_activeFeed", "Nbr_Feed", "IDpartner", "sex", "age", "minAge", "firstEgg", "hatched")))
#make wide dataset
#winter columns come from ind_br
d1 = subset(ind_br, br == "0_nb")
d1[, Nbr := NULL]
#spring columns come from feeds
d2 = feeds
#female incubation comes from ind_br
d3 = subset(ind_br, sex == 2 & br == "1_br")
d3[, Nall := NULL]
d12 = merge(d1, d2, by = c("ID", "season", "IDpartner", "firstEgg", "age", "minAge", "sex"), all = TRUE)
wd = merge(d12, d3, by = c("ID", "season", "IDpartner", "firstEgg", "age", "minAge", "sex"), all = TRUE, suffixes = c("", ".inc"))
#remove very late nests here, based on ALL BROODS! (not just the ones we have data on)
con = dbcon()
fe = dbq(con, "SELECT year_ as season, date(firstEgg) as firstEgg FROM BTatWESTERHOLZ.BREEDING where firstEgg is not NULL and year_ is not NULL")
closeCon(con)
fe[, out_firstEgg := boxplot(yday(firstEgg), plot = FALSE)$stats[5], by = season]
fe[, firstEgg := NULL]
fe = unique(fe)
wd = merge(wd, fe, all.x = FALSE, all.y = FALSE, by = "season")
wd[yday(firstEgg) > out_firstEgg, ":=" ( #DO remove late broods
#wd[yday(firstEgg) > (out_firstEgg+500), ":=" ( #DO NOT remove late broods
med_bt_time_to_firstFeed_min = NA,
Nbr_firstFeed = NA,
med_bt_time_to_lastFeed_min = NA,
Nbr_lastFeed = NA,
med_bt_midpointFeed_min = NA,
Nbr_midpointFeed = NA,
med_activeFeed = NA,
Nbr_activeFeed = NA,
br.inc = NA,
arrival.inc = NA,
arrivalArea.inc = NA,
med_time_to_sunrise_min.inc = NA,
med_bt_time_to_sunrise_min.inc = NA,
med_time_to_sunset_min.inc = NA,
med_bt_time_to_sunset_min.inc = NA,
med_bt_midpoint.inc = NA,
med_active.inc = NA,
hatchDate.inc = NA,
Nbr.inc = NA,
Nall.inc = NA,
z_hatchDate.inc = NA,
firstEgg = NA
)]
#remove nests with less than 6 hatchlings, because the feeding behaviour may not be representative, see figure above.
#check how many lines are removed when reducing broods where only few young hatched
nrow(subset(wd, hatched < 6))/nrow(wd) #0.054
nrow(subset(wd, hatched < 6)) #134
nrow(wd) #2478
wd = subset(wd, hatched < 6)
wd[, hatched := NULL]
#scale first egg and arrival
#scale within season, but take into account that individual data points were measured multiple times!
tmp = unique(subset(wd, select = c('arrival', 'season', 'ID', 'sex')))[, z_arrival := scale(arrival), by = .(season, sex)]
wd = merge(wd, tmp, by = c('arrival', 'season', 'ID', 'sex'), all.x = TRUE)
tmp = unique(subset(wd, select = c('arrivalArea', 'season', 'ID', 'sex')))[, z_arrivalArea := scale(arrivalArea), by = .(season, sex)]
wd = merge(wd, tmp, by = c('arrivalArea', 'season', 'ID', 'sex'), all.x = TRUE)
tmp = unique(subset(wd, select = c('firstEgg', 'season', 'ID', 'sex')))[, z_firstEgg := scale(yday(firstEgg)), by = .(season)]
wd = merge(wd, tmp, by = c('firstEgg', 'season', 'ID', 'sex'), all.x = TRUE)
save(wd, file = paste0("Data/", Sys.Date(), "_N", N_bt, "_wide dataset.RData"))
return(wd)
}
a
a= create_feeding_visits(hooray, N_bt = i, N_season = i, sea = x2[[2]], ind_br = x2[[1]])
nrow(a)
create_feeding_visits = function(hooray, N_bt = 3, N_season = 3, sea = sea, ind_br = ind_br) {
con = dbcon()
stage = data.table(rbind(dbq(con, "SELECT year_ as season, box, IDfemale as ID, IDmale as IDpartner, 2 as sex, date(hatchDate) as hatchDate, date(firstEgg) as firstEgg, hatched FROM BTatWESTERHOLZ.BREEDING"),
dbq(con, "SELECT year_ as season, box, IDmale as ID, IDfemale as IDpartner, 1 as sex, date(hatchDate) as hatchDate, date(firstEgg) as firstEgg, hatched FROM BTatWESTERHOLZ.BREEDING")))
#add transponder
tr = data.table(rbind(dbq(con, "SELECT ID, transponder as transp FROM BTatWESTERHOLZ.ADULTS where transponder is not NULL"), dbq(con, "SELECT ID, transponder as transp FROM BTatWESTERHOLZ.CHICKS where transponder is not NULL")))
closeCon(con)
stage = merge(stage, tr)
#subset to include only the first attempt
stage[, firstAttempt := min(firstEgg) == firstEgg, by = .(season, ID)]
stage = stage[firstAttempt == TRUE, ]
stage[, firstAttempt := NULL]
#define from and to range for selecting the late nestling stage: 12 - 18 days after hatching
stage[, start := yday(hatchDate) + 11]
stage[, end := yday(hatchDate) + 17]
stage = unique(stage)
#attach to hooray for subsetting
feeds = copy(hooray)
feeds[, season := year(out_)]
feeds = merge(feeds, stage, by = c("transp", "season", "box"))
feeds = feeds[yday(out_) >= start & yday(out_) <= end,]
#remove visits that go overnight
feeds = subset(feeds, yday(in_) == yday(out_))
feeds[, date_ := as.IDate(in_)]
#use direction assignment
feeds[direction == "IN" | direction == "IN-OUT", firstFeed := min(in_, na.rm = TRUE), by = .(transp, date_)]
feeds[direction == "OUT" | direction == "IN-OUT", lastFeed := max(out_, na.rm = TRUE), by = .(transp, date_)]
feeds = unique(subset(feeds, select = c("season", "ID", "date_", "firstFeed", "lastFeed", "hatchDate", "sex", "IDpartner", "firstEgg", "hatched")))
#add age
con = dbcon()
feeds[, year_ := season]
feeds =   addIndVar(con, feeds)
#warnings are ok
closeCon(con)
feeds[, rel_day_hatch := yday(date_) - yday(hatchDate)]
feeds[, hatchDate := NULL]
#use only those where first and last feed exist (to make the data less messy)
feeds = subset(feeds, !is.na(firstFeed) & !is.na(lastFeed))
feeds[, firstFeed := as.ITime(firstFeed)]
feeds[, lastFeed := as.ITime(lastFeed)]
feeds[, midpointFeed_min := ((firstFeed + lastFeed)/2 - (12*60*60))/60]
feeds[, activeFeed := (lastFeed - firstFeed)/60/60]
#the outliers shouldn't matter given that I take the medians of several points
#hist(as.numeric(feeds$lastFeed)/60/60)
#hist(as.numeric(feeds$firstFeed)/60/60)
#hist(as.numeric(feeds$midpointFeed)/60)
#hist(as.numeric(feeds$activeFeed)/60/60)
#add second variable
feeds[, bt_firstFeed := as.numeric(median_n(firstFeed, N_bt)), by = date_]
feeds[, bt_lastFeed := as.numeric(median_n(lastFeed, N_bt)), by = date_]
feeds[, bt_time_to_firstFeed := as.numeric((firstFeed)-as.numeric(as.ITime(bt_firstFeed)))]
feeds[, bt_time_to_lastFeed := as.numeric((lastFeed)-as.numeric(as.ITime(bt_lastFeed)))]
feeds[, bt_time_to_firstFeed_min := as.numeric(bt_time_to_firstFeed)/60]
feeds[, bt_time_to_lastFeed_min := as.numeric(bt_time_to_lastFeed)/60]
feeds[, bt_midpointFeed_min := ((firstFeed + lastFeed)/2 - (12*60*60))/60]
hist(as.numeric(feeds$bt_time_to_lastFeed_min))
hist(as.numeric(feeds$bt_time_to_firstFeed_min))
hist(as.numeric(feeds$bt_midpointFeed_min))
hist(as.numeric(feeds$activeFeed))
#the outliers shouldn't matter given that I take the medians of several points, so I'm just removing the very strange values over +/- 2 hours
hist(as.numeric(feeds$bt_time_to_lastFeed_min))
hist(as.numeric(feeds$bt_time_to_firstFeed_min))
feeds = subset(feeds, abs(bt_time_to_firstFeed_min) < 120)
feeds = subset(feeds, abs(bt_time_to_lastFeed_min) < 120)
#hist(as.numeric(feeds$bt_time_to_lastFeed_min))
#hist(as.numeric(feeds$bt_time_to_firstFeed_min))
#hist(as.numeric(feeds$bt_midpointFeed_min))
#hist(as.numeric(feeds$activeFeed))
#use only those where first and last feed exist (to make the data less messy)
feeds = subset(feeds, !is.na(bt_firstFeed) & !is.na(bt_lastFeed))
feeds[, group := paste(sex, rel_day_hatch, season)]
feeds[, use := .N, by = group]
table(feeds$use, feeds$sex)
feeds = subset(feeds, use >= N_season)
feeds[, br := "1_br"]
feeds[, tmp := scale3(bt_time_to_firstFeed_min), by = group]
feeds[, med_bt_time_to_firstFeed_min := median(tmp, na.rm = TRUE), by = list(ID, season, br)]
feeds[, tmp := scale3(bt_time_to_lastFeed_min), by = group]
feeds[, med_bt_time_to_lastFeed_min := median(tmp, na.rm = TRUE), by = list(ID, season, br)]
feeds[, tmp := scale3(bt_midpointFeed_min), by = group]
feeds[, med_bt_midpointFeed_min := median(tmp, na.rm = TRUE), by = list(ID, season, br)]
feeds[, tmp := scale3(activeFeed), by = group]
feeds[, med_activeFeed := median(tmp, na.rm = TRUE), by = list(ID, season, br)]
feeds[!is.na(activeFeed), Nbr_Feed := .N, by = list(ID, season, br)]
feeds[, Nbr_Feed := first(na.omit(Nbr_Feed)), by = list(ID, season, br)]
jpeg(filename = paste0("Figures/", Sys.time(), "_Feeding and hatchling age.jpeg"))
par(mfrow = c(2,1))
par(mar = c(3.1, 4.5, 0.1, 0.1))
par(las = 1)
boxplot(bt_firstFeed/60/60 ~ rel_day_hatch, data = feeds, outline = FALSE, ylab = "First feed")
boxplot(bt_lastFeed/60/60 ~ rel_day_hatch, data = feeds, outline = FALSE, ylab = "Last feed")
dev.off()
jpeg(filename = paste0("Figures/", Sys.time(), "_Feeding and hatchling number.jpeg"))
par(mfrow = c(2,2))
par(mar = c(3.1, 4.5, 0.1, 0.1))
par(las = 1)
boxplot(I(bt_firstFeed/60/60) ~ hatched, data = feeds, outline = FALSE, ylab = "First feed"); abline(v = 5.5)
boxplot(I(bt_lastFeed/60/60) ~ hatched, data = feeds, outline = FALSE, ylab = "Last feed"); abline(v = 5.5)
boxplot(I(bt_midpointFeed_min/60) ~ hatched, data = feeds, outline = FALSE, ylab = "Midpoint feeds"); abline(v = 5.5)
boxplot(I(activeFeed/60/60) ~ hatched, data = feeds, outline = FALSE, ylab = "Activity feeds"); abline(v = 5.5)
dev.off()
feeds[, sex := as.factor(sex)]
feeds[, age := as.factor(age)]
feeds[, firstEgg := as.IDate(firstEgg)]
feeds = unique(subset(feeds, select = c("season", "ID", "med_bt_time_to_firstFeed_min", "med_bt_time_to_lastFeed_min", "med_bt_midpointFeed_min", "med_activeFeed", "Nbr_Feed", "IDpartner", "sex", "age", "minAge", "firstEgg", "hatched")))
#make wide dataset
#winter columns come from ind_br
d1 = subset(ind_br, br == "0_nb")
d1[, Nbr := NULL]
#spring columns come from feeds
d2 = feeds
#female incubation comes from ind_br
d3 = subset(ind_br, sex == 2 & br == "1_br")
d3[, Nall := NULL]
d12 = merge(d1, d2, by = c("ID", "season", "IDpartner", "firstEgg", "age", "minAge", "sex"), all = TRUE)
wd = merge(d12, d3, by = c("ID", "season", "IDpartner", "firstEgg", "age", "minAge", "sex"), all = TRUE, suffixes = c("", ".inc"))
#remove very late nests here, based on ALL BROODS! (not just the ones we have data on)
con = dbcon()
fe = dbq(con, "SELECT year_ as season, date(firstEgg) as firstEgg FROM BTatWESTERHOLZ.BREEDING where firstEgg is not NULL and year_ is not NULL")
closeCon(con)
fe[, out_firstEgg := boxplot(yday(firstEgg), plot = FALSE)$stats[5], by = season]
fe[, firstEgg := NULL]
fe = unique(fe)
wd = merge(wd, fe, all.x = FALSE, all.y = FALSE, by = "season")
wd[yday(firstEgg) > out_firstEgg, ":=" ( #DO remove late broods
#wd[yday(firstEgg) > (out_firstEgg+500), ":=" ( #DO NOT remove late broods
med_bt_time_to_firstFeed_min = NA,
Nbr_firstFeed = NA,
med_bt_time_to_lastFeed_min = NA,
Nbr_lastFeed = NA,
med_bt_midpointFeed_min = NA,
Nbr_midpointFeed = NA,
med_activeFeed = NA,
Nbr_activeFeed = NA,
br.inc = NA,
arrival.inc = NA,
arrivalArea.inc = NA,
med_time_to_sunrise_min.inc = NA,
med_bt_time_to_sunrise_min.inc = NA,
med_time_to_sunset_min.inc = NA,
med_bt_time_to_sunset_min.inc = NA,
med_bt_midpoint.inc = NA,
med_active.inc = NA,
hatchDate.inc = NA,
Nbr.inc = NA,
Nall.inc = NA,
z_hatchDate.inc = NA,
firstEgg = NA
)]
#remove nests with less than 6 hatchlings, because the feeding behaviour may not be representative, see figure above.
#check how many lines are removed when reducing broods where only few young hatched
nrow(subset(wd, hatched < 6))/nrow(wd) #0.054
nrow(subset(wd, hatched < 6)) #134
nrow(wd) #2478
wd = subset(wd, hatched < 6)
wd[, hatched := NULL]
#scale first egg and arrival
#scale within season, but take into account that individual data points were measured multiple times!
tmp = unique(subset(wd, select = c('arrival', 'season', 'ID', 'sex')))[, z_arrival := scale(arrival), by = .(season, sex)]
wd = merge(wd, tmp, by = c('arrival', 'season', 'ID', 'sex'), all.x = TRUE)
tmp = unique(subset(wd, select = c('arrivalArea', 'season', 'ID', 'sex')))[, z_arrivalArea := scale(arrivalArea), by = .(season, sex)]
wd = merge(wd, tmp, by = c('arrivalArea', 'season', 'ID', 'sex'), all.x = TRUE)
tmp = unique(subset(wd, select = c('firstEgg', 'season', 'ID', 'sex')))[, z_firstEgg := scale(yday(firstEgg)), by = .(season)]
wd = merge(wd, tmp, by = c('firstEgg', 'season', 'ID', 'sex'), all.x = TRUE)
save(wd, file = paste0("Data/", Sys.Date(), "_N", N_bt, "_wide dataset.RData"))
return(wd)
}
b= create_feeding_visits(hooray, N_bt = i, N_season = i, sea = x2[[2]], ind_br = x2[[1]])
nrow(b)
ls()
rm(create_feeding_visits())
rm(create_feeding_visits
)
ls()
b= create_feeding_visits(hooray, N_bt = i, N_season = i, sea = x2[[2]], ind_br = x2[[1]])
nrow(b)
q()
load("/ds/grpkempenaers/Lotte/R Studio projects/Data for BtRptAct/Data/2020-01-27 12:50:56.071_raw_data.RData")
setwd("/ds/grpkempenaers/Lotte/R Studio projects/Data for BtRptAct")
xtmp = create_sleep_data(hooray)
wd = list()
a = Sys.time()
i = 4
print(i)
x2 = calculate_bt_variables(xtmp, N_bt = i)
require(BtRptAct)
setwd("/ds/grpkempenaers/Lotte/R Studio projects/Data for BtRptAct")
xtmp = create_sleep_data(hooray)
require(BtRptAct)
setwd("/ds/grpkempenaers/Lotte/R Studio projects/Data for BtRptAct")
xtmp = create_sleep_data(hooray)
wd = list()
i = 4
print(i)
x2 = calculate_bt_variables(xtmp, N_bt = i)
x2 = create_ind_data(x2, N_season = i)
wd[[i]] = create_feeding_visits(hooray, N_bt = i, N_season = i, sea = x2[[2]], ind_br = x2[[1]])
nrow(wd[[1]])
nrow(wd)
wd
nrow(x2)
nrow(x2[[1]])
nrow(x2[[2]])
nrow(xtmp)
require(btRptAct)
require(BtRptAct)
m
setwd("/ds/grpkempenaers/Lotte/R Studio projects/Data for BtRptAct")
xtmp = create_sleep_data(hooray)
wd = list()
i = 4
print(i)
x2 = calculate_bt_variables(xtmp, N_bt = i)
x2 = create_ind_data(x2, N_season = i)
nrow(xtmp)
nrow(x2[[1]])
nrow(x2[[2]])
wd[[i]] = create_feeding_visits(hooray, N_bt = i, N_season = i, sea = x2[[2]], ind_br = x2[[1]])
nrow(wd[[4]])
load("/ds/grpkempenaers/Lotte/R Studio projects/Data for BtRptAct/Data/2024-01-08_N4_wide dataset.RData")
ls
ls9)
ls()
nrow(wd)
load("/ds/grpkempenaers/Lotte/R Studio projects/Data for BtRptAct/Data/2023-04-20_N4_wide dataset.RData")
nrow(wd)
load("/ds/grpkempenaers/Lotte/R Studio projects/Data for BtRptAct/Data/2023-04-20_N4_wide dataset.RData")
nrow(wd)
load("/ds/grpkempenaers/Lotte/R Studio projects/Data for BtRptAct/Data/2024-01-08_N4_wide dataset.RData")
nrow(wd)
load("/ds/grpkempenaers/Lotte/R Studio projects/Data for BtRptAct/Data/2023-04-20_N4_wide dataset.RData")
nrow(wd)
q()
